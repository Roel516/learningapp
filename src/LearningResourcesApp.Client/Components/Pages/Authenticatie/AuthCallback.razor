@page "/authentication/login-callback"
@using LearningResourcesApp.Client.Services
@using LearningResourcesApp.Client.Components.Base
@inherits BaseComponentWithErrorHandling
@inject IAutenticatieService AutenticatieService
@inject NavigationManager Navigatie
@inject IJSRuntime JSRuntime

<PageTitle>Inloggen...</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6 text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Verwerken...</span>
            </div>
            <p class="mt-3">@statusBericht</p>
        </div>
    </div>
</div>

@code {
    private string statusBericht = "Authenticatie verwerken...";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await VerwerkAuthenticatieCallback();
        }
    }

    private async Task VerwerkAuthenticatieCallback()
    {
        await ExecuteAsync(async () =>
        {
            var fragment = await JSRuntime.InvokeAsync<string>("eval", "window.location.hash");
            

            if (!string.IsNullOrEmpty(fragment))
            {
                await VerwerkFragment(fragment);
            }
            else
            {
                await ToonFoutEnNavigeerNaarLogin("Geen authenticatiegegevens gevonden.");
            }
        });

        if (!string.IsNullOrEmpty(foutmelding))
        {
            await ToonFoutEnNavigeerNaarLogin(foutmelding);
        }
    }
   

    private async Task VerwerkFragment(string fragment)
    {
        var parameters = ParseFragment(fragment);

        Console.WriteLine($"Fragment parameters: {string.Join(", ", parameters.Select(kvp => $"{kvp.Key}={kvp.Value}"))}");
        await Task.Delay(5000);
        
        if (parameters.ContainsKey("id_token"))
        {
            await VerwerkSuccesvolleAuthenticatie(parameters);
        }
        else if (parameters.ContainsKey("error"))
        {
            await ToonFoutEnNavigeerNaarLogin($"Fout bij inloggen: {parameters["error"]}");
        }
    }

    private async Task VerwerkSuccesvolleAuthenticatie(Dictionary<string, string> parameters)
    {
        var idToken = parameters["id_token"];
        var accessToken = parameters.ContainsKey("access_token") ? parameters["access_token"] : "";

        UpdateStatus("Gebruikersgegevens ophalen...");

        var result = await AutenticatieService.VerwerkOAuthCallback(idToken, accessToken);

        if (result.Succes)
        {
            await ToonSuccesEnNavigeerNaarHome();
        }
        else
        {
            await ToonFoutEnNavigeerNaarLogin($"Fout bij inloggen: {result.Foutmelding}");
        }
    }  

    private async Task ToonSuccesEnNavigeerNaarHome()
    {
        UpdateStatus("Succesvol ingelogd! Doorverwijzen...");
        await Task.Delay(1000);
        Navigatie.NavigateTo("/", true);
    }

    private async Task ToonFoutEnNavigeerNaarLogin(string foutmelding)
    {
        UpdateStatus(foutmelding);
        await Task.Delay(2000);
        Navigatie.NavigateTo("/inloggen");
    }

    private void UpdateStatus(string bericht)
    {
        statusBericht = bericht;
        StateHasChanged();
    }

    private Dictionary<string, string> ParseFragment(string fragment)
    {
        var result = new Dictionary<string, string>();

        // Verwijder de # aan het begin
        if (fragment.StartsWith("#"))
            fragment = fragment.Substring(1);

        var pairs = fragment.Split('&');
        foreach (var pair in pairs)
        {
            var keyValue = pair.Split('=');
            if (keyValue.Length == 2)
            {
                result[keyValue[0]] = Uri.UnescapeDataString(keyValue[1]);
            }
        }

        return result;
    }
}
