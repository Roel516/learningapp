@page "/gebruikersbeheer"
@using LearningResourcesApp.Client.Components.Base
@using LearningResourcesApp.Client.Services
@using LearningResourcesApp.Models.Auth
@inherits BaseComponentWithErrorHandling
@inject IAutenticatieService AutenticatieService
@inject NavigationManager Navigatie
@inject HttpClient Http
@implements IDisposable

<PageTitle>Gebruikersbeheer</PageTitle>

<div class="container mt-4">
    <h3 class="mb-4">Gebruikersbeheer</h3>

    @if (!AutenticatieService.IsIngelogd)
    {
        <div class="alert alert-warning">
            Je moet ingelogd zijn om deze pagina te bekijken.
            <a href="/inloggen">Log hier in</a>
        </div>
    }
    else if (AutenticatieService.HuidigeGebruiker?.IsInterneMedewerker != true)
    {
        <div class="alert alert-danger">
            Je hebt geen toegang tot deze pagina. Alleen interne medewerkers kunnen gebruikers beheren.
        </div>
    }
    else
    {
        <SuccessAlert Message="@succesmelding" OnDismiss="ClearSuccess" />
        <ErrorAlert Message="@foutmelding" OnDismiss="ClearError" />

        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">Nieuwe Gebruiker Toevoegen</h5>
            </div>
            <div class="card-body">
                <EditForm Model="@nieuweGebruiker" OnValidSubmit="@VoegGebruikerToe">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label for="naam" class="form-label">Naam</label>
                            <InputText id="naam" class="form-control" @bind-Value="nieuweGebruiker.Naam" />
                        </div>

                        <div class="col-md-4 mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" type="email" class="form-control" @bind-Value="nieuweGebruiker.Email" />
                        </div>

                        <div class="col-md-4 mb-3">
                            <label for="wachtwoord" class="form-label">Wachtwoord</label>
                            <InputText id="wachtwoord" type="password" class="form-control" @bind-Value="nieuweGebruiker.Wachtwoord" />
                            <small class="form-text text-muted">Minimaal 6 karakters</small>
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary" disabled="@isBezig">
                        @if (isBezig)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Gebruiker toevoegen...</span>
                        }
                        else
                        {
                            <span>Gebruiker Toevoegen</span>
                        }
                    </button>
                </EditForm>
            </div>
        </div>

        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Bestaande Gebruikers</h5>
            </div>
            <div class="card-body">
                @if (isBezig && gebruikers.Count == 0)
                {
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Laden...</span>
                        </div>
                    </div>
                }
                else if (gebruikers.Count == 0)
                {
                    <p class="text-muted">Geen gebruikers gevonden.</p>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Naam</th>
                                    <th>Email</th>
                                    <th>Status</th>
                                    <th>Acties</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var gebruiker in gebruikers)
                                {
                                    <tr>
                                        <td>@gebruiker.Naam</td>
                                        <td>@gebruiker.Email</td>
                                        <td>
                                            @if (gebruiker.IsInterneMedewerker)
                                            {
                                                <span class="badge bg-success">Interne Medewerker</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">Gewone Gebruiker</span>
                                            }
                                        </td>
                                        <td>
                                            <button class="btn btn-sm @(gebruiker.IsInterneMedewerker ? "btn-warning" : "btn-success")"
                                                    @onclick="() => ToggleInterneMedewerker(gebruiker)"
                                                    disabled="@isBezig">
                                                @if (gebruiker.IsInterneMedewerker)
                                                {
                                                    <i class="bi bi-x-circle"></i>
                                                    <span> Verwijder Status</span>
                                                }
                                                else
                                                {
                                                    <i class="bi bi-check-circle"></i>
                                                    <span> Maak Medewerker</span>
                                                }
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private RegisterRequest nieuweGebruiker = new();
    private List<Gebruiker> gebruikers = new();

    public void Dispose()
    {
        AutenticatieService.AutenticatieGewijzigd -= OnAutenticatieGewijzigd;
    }

    protected override async Task OnInitializedAsync()
    {
        if (!AutenticatieService.IsIngelogd)
        {
            Navigatie.NavigateTo("/inloggen");
        }

        AutenticatieService.AutenticatieGewijzigd += OnAutenticatieGewijzigd;
        await LaadGebruikers();
    }

    private void OnAutenticatieGewijzigd()
    {
        if (!AutenticatieService.IsIngelogd)
        {
            Navigatie.NavigateTo("/inloggen");
        }
        InvokeAsync(StateHasChanged);
    }

    
    private async Task LaadGebruikers()
    {
        if (AutenticatieService.HuidigeGebruiker?.IsInterneMedewerker != true)
        {
            return;
        }

        await ExecuteAsync(async () =>
        {
            var response = await Http.GetAsync("api/account/users");
            if (response.IsSuccessStatusCode)
            {
                gebruikers = await response.Content.ReadFromJsonAsync<List<Gebruiker>>() ?? new();
            }
        }, "Fout bij laden gebruikers");
    }

    private async Task ToggleInterneMedewerker(Gebruiker gebruiker)
    {
        // Extra beveiliging: controleer of gebruiker interne medewerker is
        if (AutenticatieService.HuidigeGebruiker?.IsInterneMedewerker != true)
        {
            foutmelding = "Je hebt geen toegang tot deze functie.";
            return;
        }

        await ExecuteWithLoadingAsync(async () =>
        {
            var response = await Http.PutAsync($"api/account/users/{gebruiker.Id}/toggle-internal-employee", null);

            if (response.IsSuccessStatusCode)
            {
                // Update de lokale status
                gebruiker.IsInterneMedewerker = !gebruiker.IsInterneMedewerker;

                succesmelding = gebruiker.IsInterneMedewerker
                    ? $"'{gebruiker.Naam}' is nu een interne medewerker."
                    : $"Interne medewerker status verwijderd voor '{gebruiker.Naam}'.";

                StateHasChanged();
            }
            else
            {
                foutmelding = "Fout bij wijzigen gebruikersstatus";
            }
        }, "Er is een fout opgetreden bij wijzigen gebruikersstatus");
    }

    private async Task VoegGebruikerToe()
    {
        // Extra beveiliging: controleer of gebruiker interne medewerker is
        if (AutenticatieService.HuidigeGebruiker?.IsInterneMedewerker != true)
        {
            foutmelding = "Je hebt geen toegang tot deze functie.";
            return;
        }

        await ExecuteWithLoadingAsync(async () =>
        {
            nieuweGebruiker.IsSelfRegistration = false;
            var result = await AutenticatieService.Registreren(nieuweGebruiker);

            if (result.Succes)
            {
                succesmelding = $"Gebruiker '{nieuweGebruiker.Naam}' is succesvol toegevoegd!";
                nieuweGebruiker = new RegisterRequest();

                // Herlaad de gebruikerslijst
                await LaadGebruikers();
            }
            else
            {
                foutmelding = result.Foutmelding ?? "Fout bij toevoegen gebruiker";
            }
        }, "Er is een fout opgetreden bij toevoegen gebruiker");
    }
}
